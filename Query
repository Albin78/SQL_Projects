#Exploratory Data Analysis

select total_laid_off from 
layoffs_stagging3;

select max(total_laid_off),max(percentage_laid_off)
from layoffs_stagging3;


select * from
layoffs_stagging3 
where percentage_laid_off = 1
order by funds_raised_millions desc;

select company,sum(total_laid_off)
from layoffs_stagging3
group by company order by 2 desc;

select min(`date`),max(`date`)
from layoffs_stagging3;

select industry, sum(total_laid_off)
from layoffs_stagging3 group by industry
order by 2 desc;


select country,sum(total_laid_off) from
layoffs_stagging3 group by country
order by 2 desc;

select Year(`date`),sum(total_laid_off)
from layoffs_stagging3 group by year(`date`)
order by 1 desc;
#2022 has most job loses

select stage, sum(total_laid_off) from
layoffs_stagging3 group by stage
order by 2 desc;

select * from layoffs_stagging3;

#rolling total of month

select substring(`date`,1,7) as `month` , sum(total_laid_off)
from layoffs_stagging3 where substring(`date`,1,7) is not null
 group by `month`
order by 1 asc;

# Rolling total of total_laid_off

with rolling_total as
(
select substring(`date`,1,7) as `month`, sum(total_laid_off) as total_off
 from layoffs_stagging3
 where substring(`date`,1,7) is not null group by `month`,country
 order by 1 asc
 )
 select `month`,total_off ,sum(total_off) over(order by `month`) as rolling_tot
 from  rolling_total;  
 # above resulted for the progression of date according to year
 
 
 with rank_tot (Company,years,total_laid_off) as
 (
 select company,year(`date`) as `Year`,sum(total_laid_off) as tot_laid
from layoffs_stagging3
group by company,`year`
), Company_year_rank as 
(select *, dense_rank() over(partition by years order by total_laid_off desc) as Ranking
from rank_tot
where years is not null
)
select 
* from company_year_rank
where Ranking <=5;






 with rank_tot (Company,years,total_laid_off) as
 (
 select company,year(`date`) as `Year`,sum(total_laid_off) as tot_laid
from layoffs_stagging3
group by company,`Year`
) 
select *, dense_rank() over(partition by years order by total_laid_off desc) as Ranking
from rank_tot where years is not null;



# Data Cleaning
drop database world_layoffs;
use world_layoffs;
select * from layoffs;

# Remove duplicates
# standardize data
# Null Values
#Remove any columns


Create table layoffs_stagging 
like layoffs;
select * from layoffs_stagging;

insert layoffs_stagging
select * from layoffs;

select * from layoffs_stagging;

select *,
row_number() over(
partition by company,industry,total_laid_off,`date`) as row_num
from layoffs_stagging;

# Duplicate identification using CTE

with duplicate_cte as
(
select *,
row_number() over(
partition by company,location,industry,percentage_laid_off,`date`,stage,country,funds_raised_millions) as row_num
from layoffs_stagging
)
select * from
duplicate_cte where
row_num >1;

select * from layoffs_stagging where company='cazoo';

with duplicate_cte as
(
select *,
row_number() over(
partition by company,location,industry,percentage_laid_off,`date`,stage,country,funds_raised_millions) as row_num
from layoffs_stagging
)
delete  from
duplicate_cte where
row_num >1; 

create table `layoffs_stagging3` (
`company` text,
`location` text,
`industry` text,
`total_laid_off` int Default Null,
`pwrcentage_laid_off` text,
`date` text,
`stage` text,
`country` text,
`funds_raised_millions` int default null,
`row_num` int)
engine =InnoDB Default Charset=utf8mb4 Collate=utf8mb4_0900_ai_ci;

-- drop table layoffs_staging1;
select * from layoffs_stagging3;


#Creating another table and inseting values of stagging table as deletion can't done
insert into layoffs_stagging3
select *,
row_number() over(
partition by company,location,industry,percentage_laid_off,`date`,stage,country,funds_raised_millions) as row_num
from layoffs_stagging;


select * from layoffs_stagging3
where row_num>1;    



#Deleteing duplicates from new table
delete 
from layoffs_stagging3
where row_num > 1;


